#!/bin/bash

script_name=$(basename $0)

_usage()
{
	printf "Usage: $script_name <action> [args]

<action>    : Mandatory; basherbee actions as explained below.
  help      - display this help message and return
  install   - install basherbee-enabled package. [args] same as in 'basher install'
              Does bash-install first and then does basherbee setup (pkg-config and sourcing basherbee-rc)
  upgrade   - upgrade basherbee-installed package. [args] same as in 'basher upgrade'
              Does bash-update first and then redoes basherbee setup (pkg-config and sourcing basherbee-rc)
  uninstall - uninstall basherbee-installed package. [args] same as in 'basher uninstall'
              Removes basherbee setup (basherbee-rc-sourcing) and then bash-uninstall package
"
	exit $1
}

[ $# -lt 1 ] && _usage 0

_basherbee_src_rc()
{
	local rc="${@}"/basherbee-rc
	[ ! -f "$rc" ] && return 0
	grep -Fq "#$rc" ~/.gbasherbee-rc 2>/dev/null && return 0
	echo "#$rc" >> ~/.gbasherbee-rc
	cat "$rc" >> ~/.gbasherbee-rc
	echo "###$rc" >> ~/.gbasherbee-rc
	return 0
}

_basherbee_config()
{
	local pkg_dir="${@}"
	[ ! -f "$pkg_dir"/basherbee.config ] && return 0
	cd "$pkg_dir"
	bash basherbee.config
	cd -
	return 0
}

basherbee-install()
{
	# basher-install the package
	local logf=/tmp/basherbee-${user_repo}.log
	set -o pipefail
	(basher install "${@}" 2>&1 | tee ${logf}) || exit $?
	set +o pipefail
	local pkg_dir="$(grep -F "Cloning into" ${logf} | awk -F"'" '{print $2}')"
	if [ ! -d  "$pkg_dir" ]; then
		[ -z "$(grep 'already\ exists' ${logf})" ] && echo "$pkg_dir: Invalid directory. Something went wrong!" && exit 2
		exit 0
	fi
	pkg_dir=~/.basher/cellar/packages/"${@}"

	# Handle basherbee.config
	_basherbee_config "$pkg_dir"

	# Handle basherbee-rc
	_basherbee_src_rc "$pkg_dir"

	return 0
}

basherbee-upgrade()
{
	# basher-upgrade the package
	local logf=/tmp/basherbee-${user_repo}.log
	set -o pipefail
	(basher upgrade "${@}" 2>&1 | tee ${logf}) || exit $?
	set +o pipefail
	grep -Fq "Already up to date" ${logf} && return 0
	local pkg_dir=~/.basher/cellar/packages/"${@}"

	# Handle basherbee.config
	_basherbee_config "$pkg_dir"

	# Handle basherbee-rc
	_basherbee_src_rc "$pkg_dir"
}

basherbee-uninstall()
{
	local pkg_dir=~/.basher/cellar/packages/"${@}"

	# Remove package basherbee-rc sourcing
	local epath="$(printf '%s' "$pkg_dir/basherbee-rc" | sed 's/[\/&]/\\&/g')"
	sed -i "/#${epath}/,/##${epath}/d" ~/.gbasherbee-rc

	# basher-uninstall the package
	basher uninstall "${@}"
}

case "$1" in
	install|upgrade|uninstall) op=$1 ; shift ;;
	*) _usage 1 ;;
esac

user_repo=""
for arg in "${@}"; do
	[[ $arg == -* ]] && continue
	[[ $arg =~ ^([^/]+)/([^/]+)$ ]] && user_repo="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}" && break
done

basherbee-$op "${@}"

exit 0
